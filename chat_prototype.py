import tkinter as tk
import asyncio
import aiofiles
import datetime
import os
import logging
import async_timeout
import socket
from dotenv import load_dotenv
import gui
from gui import NicknameReceived, ReadConnectionStateChanged, SendingConnectionStateChanged
from chat_functions import open_connection, authorise, reconnect, InvalidToken
import anyio


load_dotenv()


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('chat_prototype')
watchdog_logger = logging.getLogger('watchdog')


def load_account_hash():
    if os.path.exists('chat_account.hash'):
        with open('chat_account.hash', 'r', encoding='utf-8') as f:
            return f.read().strip()
    return os.environ.get('CHAT_HASH', '')


async def load_history(messages_queue, history_file):
    if not os.path.exists(history_file):
        return
    try:
        async with aiofiles.open(history_file, mode='r', encoding='utf-8') as f:
            content = await f.read()
            lines = content.strip().split('\n')
            for line in lines:
                if line.strip():
                    if '] ' in line:
                        message = line.split('] ', 1)[1]
                    else:
                        message = line
                    await messages_queue.put(message)
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(lines)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


async def save_messages(history_file, save_queue):
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª: {history_file}")
    try:
        while True:
            message = await save_queue.get()
            timestamp = datetime.datetime.now().strftime("[%d.%m.%y %H:%M]")
            log_entry = f"{timestamp} {message}\n"
            async with aiofiles.open(history_file, mode='a', encoding='utf-8') as f:
                await f.write(log_entry)
                await f.flush()
            save_queue.task_done()
    except asyncio.CancelledError:
        logger.info("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def watch_for_connection(watchdog_queue, timeout=15):
    watchdog_logger.info(f"üõ°Ô∏è Watchdog –∑–∞–ø—É—â–µ–Ω —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å")
    while True:
        try:
            async with async_timeout.timeout(timeout) as cm:
                message = await watchdog_queue.get()
                timestamp = int(datetime.datetime.now().timestamp())
                if cm.expired:
                    watchdog_logger.warning(f"[{timestamp}] –ü–æ–∑–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
                else:
                    watchdog_logger.info(f"[{timestamp}] {message}")
                watchdog_queue.task_done()
        except asyncio.TimeoutError:
            if cm.expired:
                timestamp = int(datetime.datetime.now().timestamp())
                watchdog_logger.error(f"[{timestamp}] {timeout}s timeout exceeded - forcing connection close")
                raise ConnectionError(f"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç {timeout} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            watchdog_logger.error(f"–û—à–∏–±–∫–∞ –≤ watchdog: {e}")
            await asyncio.sleep(1)


async def ping_server(writer, watchdog_queue, ping_interval=10):
    logger.info(f"üèì Ping task –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {ping_interval}—Å")
    while True:
        try:
            await asyncio.sleep(ping_interval)
            writer.write(b"\n\n")
            await writer.drain()
            await watchdog_queue.put("Connection is alive. Source: Ping sent")
        except (ConnectionError, BrokenPipeError, OSError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ping: {e}")
            await watchdog_queue.put(f"Ping error: {e}")
            raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ping: {e}")
            await asyncio.sleep(1)


async def read_msgs(host, port, messages_queue, save_queue, status_updates_queue, watchdog_queue):
    await status_updates_queue.put(ReadConnectionStateChanged.INITIATED)
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —á—Ç–µ–Ω–∏—è")
    try:
        reader, writer = await asyncio.open_connection(host, port)
        logger.info(f'‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É {host}:{port}')
        await save_queue.put(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {host}:{port}')
        await status_updates_queue.put(ReadConnectionStateChanged.ESTABLISHED)
        await watchdog_queue.put("Connection is alive. Source: Connection established for reading")

        while True:
            data = await reader.readline()
            if not data:
                await watchdog_queue.put("Connection closed by server")
                break
            message = data.decode().strip()
            if message:
                await messages_queue.put(message)
                await save_queue.put(message)
                await watchdog_queue.put("Connection is alive. Source: New message in chat")

    except Exception as e:
        error_msg = f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}'
        logger.error(error_msg)
        await save_queue.put(error_msg)
        await status_updates_queue.put(ReadConnectionStateChanged.CLOSED)
        await watchdog_queue.put(f"Read error: {e}")
        raise
    finally:
        if 'writer' in locals():
            writer.close()
            await writer.wait_closed()


async def send_msgs_with_ping(host, port, account_hash, sending_queue, save_queue, status_updates_queue, watchdog_queue):
    logger.info(f"üì§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å ping –∑–∞–ø—É—â–µ–Ω –¥–ª—è {host}:{port}")
    try:
        reader, writer = await asyncio.open_connection(host, port)
        logger.info(f'‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ {host}:{port}')
        await save_queue.put(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å {host}:{port}')
        await status_updates_queue.put(SendingConnectionStateChanged.ESTABLISHED)
        await watchdog_queue.put("Connection is alive. Source: Connection established for sending")

        account_info = await authorise(reader, writer, account_hash)
        nickname = account_info['nickname']
        logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {nickname} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await watchdog_queue.put("Connection is alive. Source: Authorization done")

        async with anyio.create_task_group() as ping_group:
            ping_group.start_soon(ping_server, writer, watchdog_queue, 10)
            try:
                while True:
                    message = await sending_queue.get()
                    try:
                        writer.write(f"{message}\n\n".encode())
                        await writer.drain()
                        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message}")
                        user_message = f"> {message}"
                        await save_queue.put(user_message)
                        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: '{message}'")
                        await watchdog_queue.put("Connection is alive. Source: Message sent")
                    except Exception as e:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                        logger.error(error_msg)
                        await save_queue.put(error_msg)
                        await watchdog_queue.put(f"Message sending error: {e}")
                        await sending_queue.put(message)
                        break
                    finally:
                        sending_queue.task_done()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                raise

    except Exception as e:
        error_msg = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}'
        logger.error(error_msg)
        await save_queue.put(error_msg)
        await status_updates_queue.put(SendingConnectionStateChanged.CLOSED)
        await watchdog_queue.put(f"Sending error: {e}")
        raise
    finally:
        if 'writer' in locals():
            writer.close()
            await writer.wait_closed()


@reconnect(max_retries=10, initial_delay=1, max_delay=60)
async def handle_connection(host, read_port, send_port, account_hash, messages_queue, sending_queue, 
                          save_queue, status_updates_queue, watchdog_queue):
    logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∑–∞–¥–∞—á —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    try:
        async with anyio.create_task_group() as connection_group:
            connection_group.start_soon(read_msgs, host, read_port, messages_queue, save_queue, status_updates_queue, watchdog_queue)
            connection_group.start_soon(send_msgs_with_ping, host, send_port, account_hash, sending_queue, save_queue, status_updates_queue, watchdog_queue)
            connection_group.start_soon(watch_for_connection, watchdog_queue, 15)
    except (ConnectionError, socket.gaierror, OSError, asyncio.TimeoutError) as e:
        logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
        await save_queue.put(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_connection: {e}")
        await save_queue.put(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        raise


async def handle_authorisation(host, port, account_hash, status_updates_queue, save_queue, watchdog_queue):
    try:
        logger.info("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        await status_updates_queue.put(SendingConnectionStateChanged.INITIATED)
        reader, writer = await open_connection(host, port)
        account_info = await authorise(reader, writer, account_hash)
        nickname = account_info['nickname']
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname}.")
        await status_updates_queue.put(NicknameReceived(nickname))
        await status_updates_queue.put(SendingConnectionStateChanged.ESTABLISHED)
        await save_queue.put(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {nickname}")
        await watchdog_queue.put("Connection is alive. Source: Authorization successful")
        logger.info(f"üë§ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {nickname}")
        writer.close()
        await writer.wait_closed()
        return nickname
    except InvalidToken as e:
        await watchdog_queue.put("Authorization failed: Invalid token")
        raise
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
        logger.error(error_msg)
        await save_queue.put(error_msg)
        await status_updates_queue.put(SendingConnectionStateChanged.CLOSED)
        await watchdog_queue.put(f"Authorization error: {e}")
        raise


async def start_chat():
    account_hash = load_account_hash()
    if not account_hash:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ registration.py –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    host = os.environ.get('CHAT_HOST', 'minechat.dvmn.org')
    read_port = int(os.environ.get('LISTEN_CHAT_PORT', '5000'))
    send_port = int(os.environ.get('MESSAGE_CHAT_PORT', '5050'))
    history_file = os.environ.get('CHAT_HISTORY', 'chat_history.txt')

    print("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —á–∞—Ç–∞...")

    messages_queue = asyncio.Queue()
    sending_queue = asyncio.Queue()
    status_updates_queue = asyncio.Queue()
    save_queue = asyncio.Queue()
    watchdog_queue = asyncio.Queue()

    await load_history(messages_queue, history_file)

    try:
        nickname = await handle_authorisation(host, send_port, account_hash, status_updates_queue, save_queue, watchdog_queue)
    except InvalidToken as e:
        print(f"‚ùå {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
        try:
            root = tk.Tk()
            root.withdraw()
            gui.show_token_error()
            root.destroy()
        except Exception as gui_error:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å GUI-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {gui_error}")
        return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
        return

    try:
        async with anyio.create_task_group() as main_group:
            main_group.start_soon(gui.draw, messages_queue, sending_queue, status_updates_queue)
            main_group.start_soon(save_messages, history_file, save_queue)
            main_group.start_soon(handle_connection, host, read_port, send_port, account_hash,
                                messages_queue, sending_queue, save_queue, status_updates_queue, watchdog_queue)
    except (gui.TkAppClosed, KeyboardInterrupt):
        print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await save_queue.put("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        if not isinstance(e, (ConnectionError, socket.gaierror, OSError, asyncio.TimeoutError)):
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            print(error_msg)
            await save_queue.put(error_msg)
        else:
            print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: {e}")
    finally:
        await save_queue.join()
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


def main():
    try:
        asyncio.run(start_chat())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        if not isinstance(e, (ConnectionError, gui.TkAppClosed)):
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()