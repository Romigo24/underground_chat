import asyncio
import argparse
import os
import json
import logging
from dotenv import load_dotenv
from asyncio import StreamWriter, StreamReader


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('register_user.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('register')


load_dotenv()


async def register_user(host, port, nickname, save_to_file):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
    reader: StreamReader = None
    writer: StreamWriter = None

    try:
        logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        reader, writer = await asyncio.open_connection(host, port)
        logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        welcome_msg = await reader.readline()
        welcome_text = welcome_msg.decode().strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {welcome_text}")
        print(welcome_text)

        writer.write(b'\n')
        await writer.drain()
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
        print("–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")

        nickname_prompt = await reader.readline()
        nickname_text = nickname_prompt.decode().strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {nickname_text}")
        print(nickname_text)

        if nickname is None:
            import random
            adjectives = ["Happy", "Clever", "Brave", "Kind", "Wise", "Funny", "Gentle", "Honest"]
            nouns = ["Cat", "Dog", "Fox", "Bear", "Eagle", "Lion", "Tiger", "Wolf"]
            nickname = f"{random.choice(adjectives)} {random.choice(nouns)}"

        writer.write((nickname + '\n').encode())
        await writer.drain()
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: {nickname}")
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: {nickname}")

        account_data = await reader.readline()
        account_text = account_data.decode().strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_text}")

        account_info = json.loads(account_text)

        if account_info is None:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª null"
            logger.error(error_msg)
            raise ValueError(error_msg)

        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {account_info['nickname']}")
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {account_info['nickname']}")
        print(f"üîë –¢–æ–∫–µ–Ω: {account_info['account_hash']}")

        welcome_chat = await reader.readline()
        welcome_chat_text = welcome_chat.decode().strip()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {welcome_chat_text}")

        writer.close()
        await writer.wait_closed()
        logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

        if save_to_file:
            with open('chat_account.hash', 'w', encoding='utf-8') as f:
                f.write(account_info['account_hash'])
            logger.info(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: chat_account.hash")
            print(f"üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: chat_account.hash")

        return account_info

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {account_text if 'account_text' in locals() else 'N/A'}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise
    finally:
        if writer and not writer.is_closing():
            writer.close()
            await writer.wait_closed()


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MineChat',
        epilog='–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
               '  python3 register_user.py\n'
               '  python3 register_user.py --nickname "My Cool Nickname"\n'
               '  python3 register_user.py --host minechat.dvmn.org --port 5050\n'
               '  python3 register_user.py --no-save'
    )

    default_host = os.environ['CHAT_HOST']
    default_port = os.environ['MESSAGE_CHAT_PORT']

    parser.add_argument('--host', '-H',
                       default=default_host,
                       help='–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–∞—Ç–∞')

    parser.add_argument('--port', '-p',
                       type=int,
                       default=int(default_port),
                       help='–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–∞—Ç–∞')

    parser.add_argument('--nickname', '-n',
                       help='–ñ–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π)')

    parser.add_argument('--no-save', '-x',
                       action='store_false',
                       dest='save_to_file',
                       help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª')

    parser.add_argument('--log-level', '-l',
                       default='INFO',
                       choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                       help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')

    return parser.parse_args()


async def main():
    args = parse_args()

    logger.setLevel(args.log_level.upper())

    logger.info(f"–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {args.host}:{args.port}")
    print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {args.host}:{args.port}...")
    print()

    try:
        account_info = await register_user(
            args.host, 
            args.port, 
            args.nickname,
            args.save_to_file
        )

        print()
        print("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üë§ –ù–∏–∫–Ω–µ–π–º: {account_info['nickname']}")
        print(f"üîë –¢–æ–∫–µ–Ω: {account_info['account_hash']}")

        if args.save_to_file:
            print()
            print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:")
            print("python3 send_message.py --message \"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\"")

    except KeyboardInterrupt:
        logger.warning("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\n‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


if __name__ == '__main__':
    asyncio.run(main())