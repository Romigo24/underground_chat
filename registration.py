import asyncio
import argparse
import os
import logging
from dotenv import load_dotenv

from chat_functions import open_connection, close_connection, register


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('register')


load_dotenv()


async def main():
    parser = argparse.ArgumentParser(description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MineChat')
    default_host = os.environ['CHAT_HOST']
    default_port = os.environ['MESSAGE_CHAT_PORT']

    parser.add_argument('--host', '-H', default=default_host, help='–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–∞—Ç–∞')
    parser.add_argument('--port', '-p', type=int, default=int(default_port), help='–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–∞—Ç–∞')
    parser.add_argument('--nickname', '-n', help='–ñ–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º')
    parser.add_argument('--no-save', '-x', action='store_false', dest='save_to_file', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª')

    args = parser.parse_args()

    logger.info(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {args.host}:{args.port}...')

    reader, writer = None, None
    try:
        reader, writer = await open_connection(args.host, args.port)

        account_info = await register(reader, writer, args.nickname)

        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {account_info['nickname']}")
        logger.info(f"üîë –¢–æ–∫–µ–Ω: {account_info['account_hash']}")

        if args.save_to_file:
            with open('chat_account.hash', 'w', encoding='utf-8') as f:
                f.write(account_info['account_hash'])
            logger.info('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ chat_account.hash')

    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    finally:
        if writer:
            await close_connection(writer)


if __name__ == '__main__':
    asyncio.run(main())